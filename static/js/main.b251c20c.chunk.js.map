{"version":3,"sources":["const/alexa.js","const/google.js","components/header.js","components/speaker_button.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["Alexa","pre_commands","commands","title","pronunciation","description","Google","Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text_value","speaker_type","_changeText","bind","assertThisInitialized","_toggleButton","ssu","SpeechSynthesisUtterance","text","lang","speechSynthesis","speak","e","setState","target","value","_this2","react_default","a","createElement","className","href","rel","type","name","id","checked","onChange","htmlFor","defaultValue","placeholder","onClick","_onClick","Component","SpeakerButton","Main","map","command","i","speaker_button_SpeakerButton","key","App","header_Header","main_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b251c20c.chunk.js","sourcesContent":["export const Alexa = {\n  pre_commands: 'アレクサ、',\n  commands: [\n    {\n      title: '音楽かけて',\n      pronunciation: 'おんがくかけて',\n      description: 'ランダムで音楽をかけてくれるコマンドです。',\n    },\n    {\n      title: '音楽とめて',\n      pronunciation: 'おんがくとめて',\n      description: '再生中の音楽を停止するコマンドです。',\n    },\n    {\n      title: '音量上げて',\n      pronunciation: 'おんりょうあげて',\n      description: '音量を上げてくれるコマンドです。',\n    },\n    {\n      title: '音量下げて',\n      pronunciation: 'おんりょうさげて',\n      description: '音量を下げてくれるコマンドです。',\n    },\n    {\n      title: '洋楽流して',\n      pronunciation: 'ようがくながして',\n      description: '洋楽をかけてくれるコマンドです。',\n    },\n    {\n      title: 'ジャズ流して',\n      pronunciation: 'ジャズながして',\n      description: 'ジャス音楽をかけてくれるコマンドです。',\n    },\n    {\n      title: 'この曲名を教えて',\n      pronunciation: 'このきょくめいをおしえて',\n      description: '現在流れている曲名を教えてくれるコマンドです。',\n    },\n    {\n      title: 'この曲をリピートして',\n      pronunciation: 'このきょくをリピートして',\n      description: '現在流れている曲をリピート再生してくれるコマンドです。',\n    },\n  ]\n}\n","export const Google = {\n  pre_commands: 'OK Google、',\n  commands: [\n    {\n      title: '音楽かけて',\n      pronunciation: 'おんがくかけて',\n      description: 'ランダムで音楽をかけてくれるコマンドです。',\n    },\n    {\n      title: '音楽とめて',\n      pronunciation: 'おんがくとめて',\n      description: '再生中の音楽を停止するコマンドです。',\n    },\n    {\n      title: '音量上げて',\n      pronunciation: 'おんりょうあげて',\n      description: '音量を上げてくれるコマンドです。',\n    },\n    {\n      title: '音量下げて',\n      pronunciation: 'おんりょうさげて',\n      description: '音量を下げてくれるコマンドです。',\n    },\n    {\n      title: '洋楽流して',\n      pronunciation: 'ようがくながして',\n      description: '洋楽をかけてくれるコマンドです。',\n    },\n    {\n      title: 'ジャズ流して',\n      pronunciation: 'ジャズながして',\n      description: 'ジャス音楽をかけてくれるコマンドです。',\n    },\n    {\n      title: 'この曲名を教えて',\n      pronunciation: 'このきょくめいをおしえて',\n      description: '現在流れている曲名を教えてくれるコマンドです。',\n    },\n    {\n      title: 'この曲をリピートして',\n      pronunciation: 'このきょくをリピートして',\n      description: '現在流れている曲をリピート再生してくれるコマンドです。',\n    },\n  ]\n}\n","import React, { Component } from 'react';\nimport {Alexa} from '../const/alexa';\nimport {Google} from '../const/google';\nexport default class Header extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      text_value: \"\",\n      speaker_type: \"alexa\",\n    };\n    this._changeText = this._changeText.bind(this);\n    this._toggleButton = this._toggleButton.bind(this);\n    }\n\n    _onClick(){\n      let ssu = new SpeechSynthesisUtterance();\n      let pre_commands = '';\n      switch (this.state.speaker_type){\n        case 'alexa':{\n          pre_commands = Alexa.pre_commands;\n          break;\n        }\n        case 'google':{\n          pre_commands = Google.pre_commands;\n        }\n        default:\n        break;\n      }\n      ssu.text = pre_commands + this.state.text_value;\n      ssu.lang = 'ja-JP';\n      speechSynthesis.speak(ssu);\n    }\n      _changeText(e){\n        this.setState({text_value: e.target.value});\n      }\n      _toggleButton(e){\n        this.setState({speaker_type: e.target.value});\n      }\n    render(){\n      return(\n        <div className=\"jumbotron mv\">\n        <header className=\"mv_ttl\">\n        <h2>Smart Speaker's Commands Speaker (SSCS)</h2>\n        <p>スマートスピーカーのコマンドを日本語で発音して代行してくれるサイトです。コマンドをクリックすると発音されます。<br />\n        コマンドの追加は<a href=\"https://github.com/eishis/smart-speakers-commands-speaker\" target=\"_blank\" rel=\"noopener noreferrer\">こちらから</a>お願いします。\n        </p>\n        <div>\n        <div className=\"radio_button\">\n        <input\n        type=\"radio\"\n        value=\"alexa\"\n        name=\"s2\"\n        id=\"alexa\"\n        checked={this.state.speaker_type === \"alexa\"}\n        onChange={this._toggleButton}\n        />\n        <label htmlFor=\"alexa\" className=\"switch-alexa\">Alexa</label>\n        <input\n        type=\"radio\"\n        value=\"google\"\n        name=\"s2\"\n        id=\"google\"\n        checked={this.state.speaker_type === \"google\"}\n        onChange={this._toggleButton}\n        />\n        <label htmlFor=\"google\" className=\"switch-google\">Google Home</label>\n        </div>\n        <div id=\"form1\">\n        <input\n        type=\"text\"\n        id=\"sbox\"\n        defaultValue={this.state.text_value}\n        onChange={this._changeText}\n        placeholder=\"キーワードを入力\"\n        />\n        <button id=\"sbtn\" value=\"\" onClick={() => this._onClick()}>\n        <i className=\"fas fa-microphone fa-2x\"></i>\n        </button>\n        </div>\n        </div>\n        </header>\n        </div>\n      )\n    }\n}\n","import React, { Component } from 'react';\nexport default class SpeakerButton extends Component {\n  _onClick(pronunciation){\n    let ssu = new SpeechSynthesisUtterance();\n    ssu.text = this.props.pre_commands+pronunciation;\n    ssu.lang = 'ja-JP';\n    speechSynthesis.speak(ssu);\n  }\n  render(){\n    return(\n    <div className=\"col-sm-6 mb-2 mt-2\">\n    <button className=\"card\" onClick={()=>this._onClick(this.props.pronunciation)}>\n    <div className=\"card-body\">\n    <h4 className=\"card-title text-left\">\n    <i className=\"fas fa-play\"></i>\n    {this.props.title}\n    </h4>\n    <p className=\"card-text text-left\">\n    {this.props.description}\n    </p>\n    </div>\n    </button>\n    </div>\n  );\n  }\n}\n","import React, { Component } from 'react'\nimport SpeakerButton from './speaker_button';\nimport {Alexa} from '../const/alexa';\nimport {Google} from '../const/google';\nexport default class Main extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      speaker_type: \"alexa\",\n    };\n    this._toggleButton = this._toggleButton.bind(this);\n  }\n  _toggleButton(e){\n    this.setState({speaker_type: e.target.value});\n  }\n  render(){\n    return(\n      <div className=\"main\">\n      <div className=\"container\">\n      <div className=\"tabs\">\n      <input\n      type=\"radio\"\n      value=\"alexa\"\n      name=\"tab_item\"\n      id=\"main_alexa\"\n      checked={this.state.speaker_type === \"alexa\"}\n      onChange={this._toggleButton}\n      />\n      <label className=\"tab_item\" htmlFor=\"main_alexa\">\n      <i className=\"fab fa-amazon\"></i> Alexa\n      </label>\n      <input\n      type=\"radio\"\n      value=\"google\"\n      name=\"tab_item\"\n      id=\"main_google\"\n      checked={this.state.speaker_type === \"google\"}\n      onChange={this._toggleButton}\n      />\n      <label className=\"tab_item\" htmlFor=\"main_google\">\n      <i className=\"fab fa-google\"></i> Google Home\n      </label>\n      <div className=\"tab_content\" id=\"alexa_content\">\n      <div className=\"row\">\n      {Alexa.commands.map((command, i) => {\n        return (\n          <SpeakerButton\n          key={i}\n          title={command.title}\n          description={command.description}\n          pronunciation={command.pronunciation}\n          pre_commands={Alexa.pre_commands}\n          />\n        );\n      })\n      }\n      </div>\n      </div>\n      <div className=\"tab_content\" id=\"google_content\">\n      <div className=\"row\">\n      {Google.commands.map((command, i) => {\n        return (\n          <SpeakerButton\n          key={i}\n          title={command.title}\n          description={command.description}\n          pronunciation={command.pronunciation}\n          pre_commands={Google.pre_commands}\n          />\n        );\n      })\n      }\n      </div>\n      </div>\n      </div>\n      </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/header';\nimport Main from './components/main';\nclass App extends Component {\n  render() {\n    return (\n<div>\n<div className=\"bg-dark header\">\n<div className=\"container py-3\">\n<div className=\"logo\">\n<h1 className=\"text-white\">\n<i className=\"fas fa-microphone\"></i>\nSSCS\n</h1>\n</div>\n<p className=\"text-white\">スマートスピーカーのコマンド発音代行サービス</p>\n</div>\n</div>\n<Header/>\n<Main/>\n</div>\n);\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}